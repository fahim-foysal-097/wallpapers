name: Build and Release Wallpapers

on:
  push:
    paths:
      - 'wallpapers/**'
      - 'wallpapers-mobile/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      ZIP1: wallpaper-all.zip
      ZIP2: wallpaper-mobile-all.zip
      TAG_PREFIX: wallpaper-archive-
      KEEP_RELEASES: '3'
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare timestamp
        id: set_timestamp
        run: |
          ts=$(date -u +"%Y%m%dT%H%M%SZ")
          echo "ts=$ts" >> "$GITHUB_OUTPUT"

      - name: Install zip
        run: |
          sudo apt-get update -y
          sudo apt-get install -y zip

      - name: Create wallpaper zips
        id: create_zips
        run: |
          set -eux

          # use job env variables directly ($ZIP1, $ZIP2)
          rm -f "$ZIP1" "$ZIP2"

          zip_created=false
          zip1_exists=false
          zip2_exists=false

          if [ -d "wallpapers" ] && [ "$(ls -A wallpapers || true)" ]; then
            echo "Zipping wallpapers/ -> $ZIP1"
            zip -r "$ZIP1" wallpapers -x "*/.git/*"
            if [ -f "$ZIP1" ]; then
              zip_created=true
              zip1_exists=true
            fi
          else
            echo "No wallpapers/ folder or it's empty — skipping $ZIP1"
          fi

          if [ -d "wallpapers-mobile" ] && [ "$(ls -A wallpapers-mobile || true)" ]; then
            echo "Zipping wallpapers-mobile/ -> $ZIP2"
            zip -r "$ZIP2" wallpapers-mobile -x "*/.git/*"
            if [ -f "$ZIP2" ]; then
              zip_created=true
              zip2_exists=true
            fi
          else
            echo "No wallpapers-mobile/ folder or it's empty — skipping $ZIP2"
          fi

          for f in "$ZIP1" "$ZIP2"; do
            if [ -f "$f" ]; then
              size=$(stat -c%s "$f")
              human=$(ls -lh "$f" | awk '{print $5}')
              echo "Created $f — size $human ($size bytes)"
              if [ "$size" -ge 2147483648 ]; then
                echo "WARNING: $f is >= 2 GiB (GitHub release single-file limit)."
              fi
            fi
          done

          echo "zip_created=${zip_created}" >> "$GITHUB_OUTPUT"
          echo "zip1_exists=${zip1_exists}" >> "$GITHUB_OUTPUT"
          echo "zip2_exists=${zip2_exists}" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release (only if zip created)
        id: create_release
        if: steps.create_zips.outputs.zip_created == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_PREFIX }}${{ steps.set_timestamp.outputs.ts }}
          name: ${{ env.TAG_PREFIX }}${{ steps.set_timestamp.outputs.ts }}
          body: |
            Automated wallpaper zip build for commit `${{ github.sha }}`
            Actor: `${{ github.actor }}`
            Generated at (UTC): ${{ steps.set_timestamp.outputs.ts }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload wallpaper-all.zip (if created)
        if: steps.create_zips.outputs.zip1_exists == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eux
          ATTEMPTS=3
          UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
          UPLOAD_URL_CLEAN="${UPLOAD_URL%\{*}"
          ASSET_NAME="$ZIP1"
          ASSET_PATH="./${ASSET_NAME}"

          if [ ! -f "${ASSET_PATH}" ]; then
            echo "Asset not found: ${ASSET_PATH}"
            exit 1
          fi

          for i in $(seq 1 $ATTEMPTS); do
            echo "Upload attempt $i for ${ASSET_NAME}"
            RESP_HTTP=$(curl -sS -w "%{http_code}" -o /tmp/upload_resp \
              -X POST \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Content-Type: application/zip" \
              --data-binary @"${ASSET_PATH}" \
              "${UPLOAD_URL_CLEAN}?name=${ASSET_NAME}")

            if [ "$RESP_HTTP" -ge 200 ] && [ "$RESP_HTTP" -lt 300 ]; then
              echo "Upload succeeded (HTTP $RESP_HTTP)"
              break
            else
              echo "Upload returned HTTP $RESP_HTTP - attempt $i failed"
              cat /tmp/upload_resp || true
              if [ "$i" -lt "$ATTEMPTS" ]; then
                sleep $((i*2))
              else
                echo "All upload attempts failed"
                exit 1
              fi
            fi
          done

      - name: Upload wallpaper-mobile-all.zip (if created)
        if: steps.create_zips.outputs.zip2_exists == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eux
          ATTEMPTS=3
          UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
          UPLOAD_URL_CLEAN="${UPLOAD_URL%\{*}"
          ASSET_NAME="$ZIP2"
          ASSET_PATH="./${ASSET_NAME}"

          if [ ! -f "${ASSET_PATH}" ]; then
            echo "Asset not found: ${ASSET_PATH}"
            exit 1
          fi

          for i in $(seq 1 $ATTEMPTS); do
            echo "Upload attempt $i for ${ASSET_NAME}"
            RESP_HTTP=$(curl -sS -w "%{http_code}" -o /tmp/upload_resp \
              -X POST \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Content-Type: application/zip" \
              --data-binary @"${ASSET_PATH}" \
              "${UPLOAD_URL_CLEAN}?name=${ASSET_NAME}")

            if [ "$RESP_HTTP" -ge 200 ] && [ "$RESP_HTTP" -lt 300 ]; then
              echo "Upload succeeded (HTTP $RESP_HTTP)"
              break
            else
              echo "Upload returned HTTP $RESP_HTTP - attempt $i failed"
              cat /tmp/upload_resp || true
              if [ "$i" -lt "$ATTEMPTS" ]; then
                sleep $((i*2))
              else
                echo "All upload attempts failed"
                exit 1
              fi
            fi
          done

      - name: Prune old wallpaper releases (keep only ${{ env.KEEP_RELEASES }})
        if: steps.create_zips.outputs.zip_created == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prefix = process.env.TAG_PREFIX || 'wallpaper-archive-';
            const keep = parseInt(process.env.KEEP_RELEASES || '3', 10);

            const releasesResp = await github.rest.repos.listReleases({
              owner,
              repo,
              per_page: 100
            });

            const releases = releasesResp.data
              .filter(r => r.tag_name && r.tag_name.startsWith(prefix))
              .sort((a,b) => new Date(b.created_at) - new Date(a.created_at));

            core.info(`Found ${releases.length} releases with prefix '${prefix}'.`);

            if (releases.length <= keep) {
              core.info(`Nothing to prune (keep = ${keep}).`);
              return;
            }

            const toDelete = releases.slice(keep);
            core.info(`Will delete ${toDelete.length} old release(s).`);

            for (const r of toDelete) {
              try {
                core.info(`Deleting release id=${r.id} tag=${r.tag_name} name="${r.name}"`);
                await github.rest.repos.deleteRelease({
                  owner,
                  repo,
                  release_id: r.id
                });
              } catch (err) {
                core.warning(`Failed to delete release id=${r.id}: ${err}`);
              }

              // Attempt to delete the git tag reference as well
              try {
                const ref = `tags/${r.tag_name}`;
                core.info(`Attempting to delete git ref ${ref}`);
                await github.rest.git.deleteRef({
                  owner,
                  repo,
                  ref
                });
              } catch (err) {
                core.warning(`Failed to delete git tag for ${r.tag_name}: ${err.message || err}`);
              }
            }

            core.info('Prune complete.');
